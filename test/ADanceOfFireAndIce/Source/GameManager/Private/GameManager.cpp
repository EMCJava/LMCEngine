//
// Created by samsa on 7/8/2023.
//

#include "GameManager.hpp"

#include <Engine/Core/Concept/ConceptRenderable.hpp>
#include <Engine/Core/Scene/Orientation/OrientationCoordinate.hpp>
#include <Engine/Engine.hpp>

#include <Engine/Core/Audio/AudioEngine.hpp>
#include <Engine/Core/Graphic/API/GraphicAPI.hpp>
#include <Engine/Core/Graphic/Shader/Shader.hpp>
#include <Engine/Core/Graphic/Sprites/SpriteSquare.hpp>
#include <Engine/Core/Graphic/Sprites/SpriteSquareTexture.hpp>
#include <Engine/Core/Graphic/Camera/PureConceptCamera.hpp>
#include <Engine/Core/Input/UserInput.hpp>

#include <spdlog/spdlog.h>

#pragma warning( Tempory for keycode )
#include <GLFW/glfw3.h>

DEFINE_CONCEPT_DS_MA_SE( GameManager, Concept )

namespace
{

std::vector<std::pair<uint32_t, float>> TmpMap {
    { 180,   1193},
    { 180,   1493},
    { 180,   1793},
    { 180,   2093},
    { 180,   2393},
    { 180,   2693},
    { 180,   2993},
    { 180,   3293},
    {  90,   3443},
    {  90,   3593},
    { 180,   3893},
    { 180,   4193},
    { 180,   4493},
    { 180,   4793},
    {  90,   4943},
    {  90,   5093},
    {  90,   5243},
    {  90,   5393},
    {  45,   5468},
    {  45,   5543},
    {  45,   5618},
    {  45,   5693},
    { 180,   5993},
    {  90,   6143},
    {  90,   6293},
    {  90,   6443},
    {  90,   6593},
    {  90,   6743},
    {  45,   6818},
    {  45,   6893},
    {  90,   7043},
    {  90,   7193},
    {  90,   7343},
    {  90,   7493},
    {  90,   7643},
    {  90,   7793},
    {  45,   7868},
    {  45,   7943},
    {  45,   8018},
    {  45,   8093},
    {  90,   8243},
    {  90,   8393},
    {  90,   8543},
    {  90,   8693},
    {  90,   8843},
    {  45,   8918},
    {  45,   8993},
    {  90,   9143},
    {  90,   9293},
    {  45,   9368},
    {  45,   9443},
    {  90,   9593},
    { 180,   9893},
    { 180,  10193},
    { 180,  10493},
    {  45,  10568},
    { 135,  10793},
    { 180,  11093},
    {  90,  11243},
    {  90,  11393},
    {  90,  11543},
    {  90,  11693},
    {  90,  11843},
    { 180,  12143},
    {  90,  12293},
    { 180,  12593},
    {  90,  12743},
    {  90,  12893},
    {  90,  13043},
    {  90,  13193},
    { 180,  13493},
    {  90,  13643},
    {  90,  13793},
    {  90,  13943},
    {  90,  14093},
    {  90,  14243},
    { 180,  14543},
    {  90,  14693},
    { 180,  14993},
    {  90,  15143},
    {  90,  15293},
    {  90,  15443},
    {  90,  15593},
    { 180,  15893},
    {  90,  16043},
    {  90,  16193},
    {  90,  16343},
    {  90,  16493},
    {  90,  16643},
    { 180,  16943},
    {  90,  17093},
    {  90,  17243},
    {  90,  17393},
    {  90,  17543},
    {  90,  17693},
    {  90,  17843},
    { 180,  18143},
    {  90,  18293},
    {  90,  18443},
    {  90,  18593},
    {  90,  18743},
    {  90,  18893},
    {  90,  19043},
    { 180,  19343},
    {  90,  19493},
    {  90,  19643},
    {  90,  19793},
    {  90,  19943},
    {  90,  20093},
    {  90,  20243},
    {  90,  20393},
    {  90,  20543},
    {  45,  20618},
    {  45,  20693},
    {  90,  20843},
    {  90,  20993},
    {  45,  21068},
    {  45,  21143},
    {  90,  21293},
    {  90,  21443},
    {  90,  21593},
    {  90,  21743},
    {  45,  21818},
    {  45,  21893},
    {  90,  22043},
    {  90,  22193},
    {  45,  22268},
    {  45,  22343},
    {  45,  22418},
    {  45,  22493},
    {  90,  22643},
    {  90,  22793},
    {  90,  22943},
    {  45,  23018},
    {  45,  23093},
    {  90,  23243},
    {  90,  23393},
    {  45,  23468},
    {  45,  23543},
    {  45,  23618},
    {  45,  23693},
    {  90,  23843},
    {  90,  23993},
    {  90,  24143},
    {  45,  24218},
    {  45,  24293},
    {  90,  24443},
    {  90,  24593},
    {  45,  24668},
    {  45,  24743},
    {  90,  24893},
    {  45,  24968},
    {  45,  25043},
    {  90,  25193},
    {  90,  25343},
    {  45,  25418},
    {  45,  25493},
    {  90,  25643},
    {  90,  25793},
    {  45,  25868},
    {  45,  25943},
    {  45,  26018},
    {  45,  26093},
    {  90,  26243},
    {  90,  26393},
    {  45,  26468},
    {  45,  26543},
    {  90,  26693},
    {  90,  26843},
    {  45,  26918},
    {  45,  26993},
    {  45,  27068},
    {  45,  27143},
    {  90,  27293},
    {  90,  27443},
    {  90,  27593},
    {  90,  27743},
    {  45,  27818},
    {  45,  27893},
    {  90,  28043},
    {  90,  28193},
    {  45,  28268},
    {  45,  28343},
    {  90,  28493},
    {  90,  28643},
    {  90,  28793},
    {  45,  28868},
    {  45,  28943},
    {  45,  29018},
    {  45,  29093},
    {  90,  29243},
    {  90,  29393},
    { 180,  29693},
    {  90,  29843},
    {  90,  29993},
    {  90,  30143},
    {  45,  30218},
    {  45,  30293},
    {  90,  30443},
    {  90,  30593},
    { 135,  30818},
    {  45,  30893},
    {  90,  31043},
    {  90,  31193},
    {  90,  31343},
    {  45,  31418},
    {  45,  31493},
    {  90,  31643},
    {  90,  31793},
    {  90,  31943},
    {  45,  32018},
    {  45,  32093},
    {  90,  32243},
    {  90,  32393},
    {  90,  32543},
    {  45,  32618},
    {  45,  32693},
    {  90,  32843},
    {  90,  32993},
    { 135,  33218},
    {  45,  33293},
    {  90,  33443},
    {  90,  33593},
    {  90,  33743},
    {  45,  33818},
    {  45,  33893},
    {  90,  34043},
    {  90,  34193},
    {  45,  34268},
    {  45,  34343},
    {  45,  34418},
    {  45,  34493},
    {  90,  34643},
    {  90,  34793},
    {  90,  34943},
    {  45,  35018},
    {  45,  35093},
    {  90,  35243},
    {  90,  35393},
    {  45,  35468},
    {  45,  35543},
    {  45,  35618},
    {  45,  35693},
    {  90,  35843},
    {  90,  35993},
    {  45,  36068},
    {  45,  36143},
    {  45,  36218},
    {  45,  36293},
    {  45,  36368},
    {  45,  36443},
    {  90,  36593},
    {  45,  36668},
    {  45,  36743},
    {  45,  36818},
    {  45,  36893},
    {  45,  36968},
    {  45,  37043},
    {  90,  37193},
    {  90,  37343},
    {  45,  37418},
    {  45,  37493},
    {  45,  37568},
    {  45,  37643},
    {  45,  37718},
    {  45,  37793},
    {  45,  37868},
    {  45,  37943},
    {  45,  38018},
    {  45,  38093},
    {  45,  38168},
    {  45,  38243},
    {  45,  38318},
    {  45,  38393},
    {  90,  38543},
    {  90,  38693},
    {  90,  38843},
    {  90,  38993},
    { 180,  39293},
    {  90,  39443},
    {  90,  39593},
    { 180,  39893},
    { 180,  40193},
    { 180,  40493},
    { 180,  40793},
    { 180,  41093},
    { 180,  41393},
    { 180,  41693},
    {  90,  41843},
    {  90,  41993},
    { 180,  42293},
    { 180,  42593},
    { 180,  42893},
    { 180,  43193},
    {  90,  43343},
    {  45,  43418},
    {  45,  43493},
    {  90,  43643},
    {  90,  43793},
    {  45,  43868},
    {  45,  43943},
    {  45,  44018},
    {  45,  44093},
    {  90,  44243},
    {  90,  44393},
    { 180,  44693},
    { 180,  44993},
    { 180,  45293},
    { 180,  45593},
    { 180,  45893},
    { 180,  46193},
    { 180,  46493},
    {  90,  46643},
    {  90,  46793},
    { 180,  47093},
    { 180,  47393},
    { 180,  47693},
    { 180,  47993},
    {  90,  48143},
    {  45,  48218},
    {  45,  48293},
    {  90,  48443},
    {  90,  48593},
    {  45,  48668},
    {  45,  48743},
    {  45,  48818},
    {  45,  48893},
    {  45,  48968},
    {  45,  49043},
    {  90,  49193},
    { 135,  49418},
    {  45,  49493},
    {  90,  49643},
    {  90,  49793},
    {  45,  49868},
    {  90,  50018},
    {  45,  50093},
    {  90,  50243},
    {  90,  50393},
    {  45,  50468},
    {  45,  50543},
    {  90,  50693},
    {  45,  50768},
    {  45,  50843},
    {  90,  50993},
    {  45,  51068},
    {  45,  51143},
    {  45,  51218},
    {  45,  51293},
    {  90,  51443},
    {  90,  51593},
    {  90,  51743},
    {  45,  51818},
    {  45,  51893},
    {  90,  52043},
    {  90,  52193},
    {  45,  52268},
    {  45,  52343},
    {  45,  52418},
    {  45,  52493},
    {  90,  52643},
    {  90,  52793},
    {  90,  52943},
    {  45,  53018},
    {  45,  53093},
    {  90,  53243},
    {  90,  53393},
    {  45,  53468},
    {  45,  53543},
    {  45,  53618},
    {  45,  53693},
    {  45,  53768},
    {  45,  53843},
    {  90,  53993},
    { 135,  54218},
    {  45,  54293},
    {  90,  54443},
    {  90,  54593},
    {  45,  54668},
    {  90,  54818},
    {  45,  54893},
    {  90,  55043},
    {  90,  55193},
    {  45,  55268},
    {  45,  55343},
    {  90,  55493},
    {  45,  55568},
    {  45,  55643},
    {  90,  55793},
    {  60,  55893},
    {  60,  55993},
    {  60,  56093},
    {  60,  56193},
    {  60,  56293},
    {  60,  56393},
    {  90,  56543},
    {  45,  56618},
    {  45,  56693},
    {  90,  56843},
    {  90,  56993},
    {  45,  57068},
    {  45,  57143},
    {  45,  57218},
    {  45,  57293},
    {  90,  57443},
    {  90,  57593},
    {  90,  57743},
    {  45,  57818},
    {  45,  57893},
    {  90,  58043},
    {  90,  58193},
    {  45,  58268},
    {  45,  58343},
    {  90,  58493},
    {  30,  58543},
    {  30,  58593},
    {  30,  58643},
    {  90,  58793},
    { 180,  59093},
    {  90,  59243},
    {  90,  59393},
    {  90,  59543},
    {  45,  59618},
    {  45,  59693},
    {  90,  59843},
    {  90,  59993},
    {  90,  60143},
    {  45,  60218},
    {  45,  60293},
    {  90,  60443},
    {  90,  60593},
    {  45,  60668},
    {  45,  60743},
    {  45,  60818},
    {  45,  60893},
    {  90,  61043},
    {  90,  61193},
    {  90,  61343},
    {  90,  61493},
    {  90,  61643},
    {  45,  61718},
    {  45,  61793},
    {  90,  61943},
    {  45,  62018},
    {  45,  62093},
    {  45,  62168},
    {  45,  62243},
    {  90,  62393},
    { 180,  62693},
    {  60,  62793},
    {  60,  62893},
    {  60,  62993},
    {  60,  63093},
    {  60,  63193},
    {  60,  63293},
    {  60,  63393},
    {  60,  63493},
    {  60,  63593},
    { 120,  63793},
    {  60,  63893},
    { 120,  64093},
    {  60,  64193},
    { 120,  64393},
    {  60,  64493},
    { 120,  64693},
    {  60,  64793},
    { 120,  64993},
    {  60,  65093},
    {  60,  65193},
    {  60,  65293},
    {  60,  65393},
    { 120,  65593},
    {  60,  65693},
    {  60,  65793},
    {  60,  65893},
    {  60,  65993},
    { 120,  66193},
    {  60,  66293},
    { 120,  66493},
    {  60,  66593},
    { 120,  66793},
    {  60,  66893},
    { 120,  67093},
    {  60,  67193},
    { 120,  67393},
    {  60,  67493},
    {  60,  67593},
    {  60,  67693},
    {  60,  67793},
    { 120,  67993},
    {  60,  68093},
    { 180,  68393},
    { 120,  68593},
    {  60,  68693},
    { 120,  68893},
    {  60,  68993},
    { 120,  69193},
    {  60,  69293},
    { 120,  69493},
    {  60,  69593},
    { 120,  69793},
    {  60,  69893},
    {  60,  69993},
    {  60,  70093},
    {  60,  70193},
    { 120,  70393},
    {  60,  70493},
    {  60,  70593},
    {  60,  70693},
    {  60,  70793},
    { 120,  70993},
    {  60,  71093},
    { 120,  71293},
    {  60,  71393},
    { 120,  71593},
    {  60,  71693},
    { 120,  71893},
    {  60,  71993},
    { 120,  72193},
    {  60,  72293},
    {  60,  72393},
    {  60,  72493},
    {  60,  72593},
    {  90,  72743},
    { 180,  73043},
    { 180,  73343},
    {  45,  73418},
    {  45,  73493},
    {  90,  73643},
    {  90,  73793},
    {  45,  73868},
    {  45,  73943},
    {  90,  74093},
    {  90,  74243},
    {  90,  74393},
    {  90,  74543},
    {  45,  74618},
    {  45,  74693},
    {  90,  74843},
    {  90,  74993},
    {  45,  75068},
    {  45,  75143},
    {  45,  75218},
    {  45,  75293},
    {  90,  75443},
    { 180,  75743},
    {  45,  75818},
    {  45,  75893},
    {  90,  76043},
    {  90,  76193},
    {  45,  76268},
    {  45,  76343},
    {  45,  76418},
    {  45,  76493},
    {  90,  76643},
    {  90,  76793},
    {  90,  76943},
    {  45,  77018},
    {  45,  77093},
    {  90,  77243},
    {  90,  77393},
    {  45,  77468},
    {  45,  77543},
    {  45,  77618},
    {  45,  77693},
    {  90,  77843},
    { 180,  78143},
    {  45,  78218},
    {  45,  78293},
    {  90,  78443},
    {  90,  78593},
    {  45,  78668},
    {  45,  78743},
    {  45,  78818},
    {  45,  78893},
    {  90,  79043},
    {  90,  79193},
    {  45,  79268},
    {  45,  79343},
    {  90,  79493},
    {  90,  79643},
    {  45,  79718},
    {  45,  79793},
    {  45,  79868},
    {  45,  79943},
    {  90,  80093},
    {  90,  80243},
    {  90,  80393},
    {  90,  80543},
    {  45,  80618},
    {  45,  80693},
    {  90,  80843},
    {  90,  80993},
    {  45,  81068},
    {  45,  81143},
    {  90,  81293},
    {  90,  81443},
    {  45,  81518},
    {  45,  81593},
    {  45,  81668},
    {  45,  81743},
    {  45,  81818},
    {  45,  81893},
    {  90,  82043},
    {  90,  82193},
    { 180,  82493},
    {  90,  82643},
    {  90,  82793},
    { 135,  83018},
    {  45,  83093},
    {  90,  83243},
    {  45,  83318},
    {  45,  83393},
    { 135,  83618},
    {  45,  83693},
    {  90,  83843},
    {  90,  83993},
    {  90,  84143},
    {  45,  84218},
    {  45,  84293},
    {  90,  84443},
    {  90,  84593},
    {  90,  84743},
    {  45,  84818},
    {  90,  84968},
    {  45,  85043},
    {  90,  85193},
    { 135,  85418},
    {  45,  85493},
    {  90,  85643},
    {  45,  85718},
    {  45,  85793},
    { 135,  86018},
    {  45,  86093},
    {  90,  86243},
    {  90,  86393},
    {  90,  86543},
    {  45,  86618},
    {  45,  86693},
    {  90,  86843},
    {  90,  86993},
    {  45,  87068},
    {  45,  87143},
    {  45,  87218},
    {  45,  87293},
    {  90,  87443},
    {  90,  87593},
    {  45,  87668},
    {  45,  87743},
    {  45,  87818},
    {  45,  87893},
    {  90,  88043},
    {  90,  88193},
    {  45,  88268},
    {  45,  88343},
    {  45,  88418},
    {  45,  88493},
    {  90,  88643},
    {  90,  88793},
    {  45,  88868},
    {  45,  88943},
    {  45,  89018},
    {  45,  89093},
    {  90,  89243},
    {  45,  89318},
    {  45,  89393},
    {  45,  89468},
    {  45,  89543},
    {  45,  89618},
    {  45,  89693},
    {  45,  89768},
    {  45,  89843},
    {  90,  89993},
    {  45,  90068},
    {  45,  90143},
    {  45,  90218},
    {  45,  90293},
    {  45,  90368},
    {  45,  90443},
    {  45,  90518},
    {  45,  90593},
    {  45,  90668},
    {  45,  90743},
    {  45,  90818},
    {  45,  90893},
    {  45,  90968},
    {  45,  91043},
    {  45,  91118},
    {  45,  91193},
    { 120,  91393},
    {  60,  91493},
    { 120,  91693},
    {  60,  91793},
    { 120,  91993},
    {  60,  92093},
    { 120,  92293},
    {  60,  92393},
    { 180,  92693},
    { 180,  92993},
    {  60,  93093},
    {  60,  93193},
    {  60,  93293},
    { 180,  93593},
    { 180,  93893},
    { 180,  94193},
    { 180,  94493},
    { 180,  94793},
    { 180,  95093},
    { 180,  95393},
    { 180,  95693},
    {  90,  95843},
    {  90,  95993},
    { 180,  96293},
    { 180,  96593},
    { 180,  96893},
    { 180,  97193},
    {  90,  97343},
    {  45,  97418},
    {  45,  97493},
    {  90,  97643},
    {  90,  97793},
    {  45,  97868},
    {  45,  97943},
    {  45,  98018},
    {  45,  98093},
    {  90,  98243},
    {  90,  98393},
    { 180,  98693},
    { 180,  98993},
    { 180,  99293},
    { 180,  99593},
    { 180,  99893},
    { 180, 100193},
    { 180, 100493},
    {  90, 100643},
    {  90, 100793},
    { 180, 101093},
    { 180, 101393},
    { 180, 101693},
    { 180, 101993},
    { 360, 102593},
    {  45, 102668},
    {  45, 102743},
    {  45, 102818},
    {  45, 102893},
    {  45, 102968},
    {  45, 103043},
    {  90, 103193},
    { 135, 103418},
    {  45, 103493},
    {  90, 103643},
    {  90, 103793},
    {  45, 103868},
    {  90, 104018},
    {  45, 104093},
    {  90, 104243},
    {  90, 104393},
    {  45, 104468},
    {  45, 104543},
    {  90, 104693},
    {  45, 104768},
    {  45, 104843},
    {  90, 104993},
    {  45, 105068},
    {  45, 105143},
    {  45, 105218},
    {  45, 105293},
    {  90, 105443},
    {  90, 105593},
    {  90, 105743},
    {  45, 105818},
    {  45, 105893},
    {  90, 106043},
    {  90, 106193},
    {  45, 106268},
    {  45, 106343},
    {  45, 106418},
    {  45, 106493},
    {  90, 106643},
    {  90, 106793},
    {  90, 106943},
    {  45, 107018},
    {  45, 107093},
    {  90, 107243},
    {  90, 107393},
    {  45, 107468},
    {  45, 107543},
    {  45, 107618},
    {  45, 107693},
    {  45, 107768},
    {  45, 107843},
    {  90, 107993},
    { 135, 108218},
    {  45, 108293},
    {  90, 108443},
    {  90, 108593},
    {  45, 108668},
    {  90, 108818},
    {  45, 108893},
    {  90, 109043},
    {  90, 109193},
    {  45, 109268},
    {  45, 109343},
    {  90, 109493},
    {  45, 109568},
    {  45, 109643},
    {  90, 109793},
    {  60, 109893},
    {  60, 109993},
    {  60, 110093},
    {  60, 110193},
    {  60, 110293},
    {  60, 110393},
    {  90, 110543},
    {  45, 110618},
    {  45, 110693},
    {  90, 110843},
    {  90, 110993},
    {  45, 111068},
    {  45, 111143},
    {  45, 111218},
    {  45, 111293},
    {  90, 111443},
    {  90, 111593},
    {  90, 111743},
    {  45, 111818},
    {  45, 111893},
    {  90, 112043},
    {  90, 112193},
    {  45, 112268},
    {  45, 112343},
    {  90, 112493},
    {  30, 112543},
    {  30, 112593},
    {  30, 112643},
    {  90, 112793},
    { 180, 113093},
    {  90, 113243},
    {  90, 113393},
    {  90, 113543},
    {  45, 113618},
    {  45, 113693},
    {  90, 113843},
    {  90, 113993},
    {  90, 114143},
    {  45, 114218},
    {  45, 114293},
    {  90, 114443},
    {  90, 114593},
    {  45, 114668},
    {  45, 114743},
    {  45, 114818},
    {  45, 114893},
    {  90, 115043},
    {  90, 115193},
    { 180, 115493},
    {  90, 115643},
    {  45, 115718},
    {  45, 115793},
    {  90, 115943},
    {  45, 116018},
    {  45, 116093},
    {  45, 116168},
    {  45, 116243},
    {  90, 116393},
    {  90, 116543},
    {  90, 116693},
    {  45, 116768},
    {  45, 116843},
    {  90, 116993},
    {  60, 117093},
    {  60, 117193},
    {  60, 117293},
    {  60, 117393},
    {  60, 117493},
    {  60, 117593},
    {  90, 117743},
    {  45, 117818},
    {  45, 117893},
    {  90, 118043},
    {  45, 118118},
    {  45, 118193},
    {  45, 118268},
    {  45, 118343},
    {  45, 118418},
    {  45, 118493},
    {  90, 118643},
    {  90, 118793},
    {  45, 118868},
    {  45, 118943},
    {  45, 119018},
    {  45, 119093},
    {  90, 119243},
    {  45, 119318},
    {  45, 119393},
    {  45, 119468},
    {  45, 119543},
    {  45, 119618},
    {  45, 119693},
    {  45, 119768},
    {  45, 119843},
    {  90, 119993},
    {  45, 120068},
    {  45, 120143},
    {  45, 120218},
    {  45, 120293},
    {  45, 120368},
    {  45, 120443},
    {  45, 120518},
    {  45, 120593},
    {  45, 120668},
    {  45, 120743},
    {  45, 120818},
    {  45, 120893},
    {  45, 120968},
    {  45, 121043},
    {  45, 121118},
    {  45, 121193},
    { 360, 121793},
    {1080, 123593},
    { 360, 124193},
    { 360, 124793},
    { 360, 125393},
    { 360, 125993},
    { 360, 126593},
    { 360, 127193},
    { 180, 127493},
    { 180, 127793},
    { 180, 128093},
    { 180, 128393},
    { 360, 128993},
    { 360, 129593},
    { 360, 130193},
    { 360, 130793},
    { 180, 131093},
    { 180, 131393},
    { 180, 131693},
    { 180, 131993},
    { 360, 132593},
    { 360, 133193},
    {  90, 133343},
    {  90, 133493},
    {  90, 133643},
    {  90, 133793},
    {  90, 133943},
    {  90, 134093},
    {  90, 134243},
    {  90, 134393},
    {  90, 134543},
    {  90, 134693},
    {  90, 134843},
    {  90, 134993},
    {  45, 135068},
    {  45, 135143},
    {  45, 135218},
    {  45, 135293},
    { 180, 135593},
    { 135, 135818},
    {  45, 135893},
    {  90, 136043},
    {  90, 136193},
    {  45, 136268},
    {  90, 136418},
    {  45, 136493},
    {  90, 136643},
    {  90, 136793},
    {  45, 136868},
    {  45, 136943},
    {  90, 137093},
    {  45, 137168},
    {  45, 137243},
    {  90, 137393},
    {  45, 137468},
    {  45, 137543},
    {  45, 137618},
    {  45, 137693},
    {  90, 137843},
    {  90, 137993},
    {  90, 138143},
    {  45, 138218},
    {  45, 138293},
    {  90, 138443},
    {  90, 138593},
    {  45, 138668},
    {  45, 138743},
    {  45, 138818},
    {  45, 138893},
    {  90, 139043},
    {  90, 139193},
    {  90, 139343},
    {  45, 139418},
    {  45, 139493},
    {  90, 139643},
    {  90, 139793},
    {  45, 139868},
    {  45, 139943},
    {  45, 140018},
    {  45, 140093},
    {  45, 140168},
    {  45, 140243},
    {  90, 140393},
    { 135, 140618},
    {  45, 140693},
    {  90, 140843},
    {  90, 140993},
    {  45, 141068},
    {  90, 141218},
    {  45, 141293},
    {  90, 141443},
    {  90, 141593},
    {  45, 141668},
    {  45, 141743},
    {  90, 141893},
    {  45, 141968},
    {  45, 142043},
    {  90, 142193},
    {  45, 142268},
    {  45, 142343},
    {  45, 142418},
    {  45, 142493},
    {  45, 142568},
    {  45, 142643},
    {  45, 142718},
    {  45, 142793},
    {  90, 142943},
    {  45, 143018},
    {  45, 143093},
    {  90, 143243},
    {  90, 143393},
    {  45, 143468},
    {  45, 143543},
    {  45, 143618},
    {  45, 143693},
    {  90, 143843},
    {  90, 143993},
    {  90, 144143},
    {  45, 144218},
    {  45, 144293},
    {  90, 144443},
    {  90, 144593},
    {  45, 144668},
    {  45, 144743},
    {  45, 144818},
    {  45, 144893},
    {  30, 144943},
    {  30, 144993},
    {  30, 145043},
    {  90, 145193},
    { 180, 145493},
    { 180, 145793},
    { 180, 146093},
    { 180, 146393},
    { 180, 146693},
    { 180, 146993},
    { 180, 147293},
    {  90, 147443},
    {  90, 147593},
    { 180, 147893},
    { 180, 148193},
    { 180, 148493},
    { 180, 148793},
    {  90, 148943},
    {  90, 149093},
    {  90, 149243},
    {  90, 149393},
    {  90, 149543},
    {  90, 149693},
    {  90, 149843},
    {  90, 149993},
    { 135, 150218},
    {  45, 150293},
    {  90, 150443},
    {  90, 150593},
    { 135, 150818},
    {  45, 150893},
    {  90, 151043},
    {  90, 151193},
    { 135, 151418},
    {  45, 151493},
    {  90, 151643},
    {  90, 151793},
    { 135, 152018},
    {  45, 152093},
    {  90, 152243},
    {  90, 152393},
    { 135, 152618},
    {  45, 152693},
    {  90, 152843},
    {  90, 152993},
    {  90, 153143},
    {  90, 153293},
    {  90, 153443},
    {  90, 153593},
    { 180, 153893},
    {  45, 153968},
    {  45, 154043},
    {  90, 154193},
    {  45, 154268},
    {  45, 154343},
    {  45, 154418},
    {  45, 154493},
    {  45, 154568},
    {  45, 154643},
    {  90, 154793},
    { 135, 155018},
    {  45, 155093},
    {  90, 155243},
    {  90, 155393},
    {  45, 155468},
    {  45, 155543},
    {  45, 155618},
    {  45, 155693},
    {  90, 155843},
    {  90, 155993},
    {  45, 156068},
    {  45, 156143},
    {  45, 156218},
    {  45, 156293},
    {  45, 156368},
    {  45, 156443},
    {  90, 156593},
    {  45, 156668},
    {  45, 156743},
    {  45, 156818},
    {  45, 156893},
    {  45, 156968},
    {  45, 157043},
    {  45, 157118},
    {  45, 157193},
    {  90, 157343},
    {  45, 157418},
    {  45, 157493},
    {  90, 157643},
    {  90, 157793},
    {  45, 157868},
    {  45, 157943},
    {  45, 158018},
    {  45, 158093},
    {  90, 158243},
    {  90, 158393},
    {  45, 158468},
    {  45, 158543},
    {  90, 158693},
    {  45, 158768},
    {  45, 158843},
    {  90, 158993},
    {  45, 159068},
    {  45, 159143},
    {  45, 159218},
    {  45, 159293},
    {  45, 159368},
    {  45, 159443},
    {  90, 159593},
    {  90, 159743},
    {  45, 159818},
    {  45, 159893},
    {  90, 160043},
    {  45, 160118},
    {  45, 160193},
    {  45, 160268},
    {  45, 160343},
    {  45, 160418},
    {  45, 160493},
    {  90, 160643},
    {  90, 160793},
    {  45, 160868},
    {  45, 160943},
    {  45, 161018},
    {  45, 161093},
    {  30, 161143},
    {  30, 161193},
    {  30, 161243},
    {  90, 161393},
    {  60, 161493},
    {  60, 161593},
    {  60, 161693},
    {  60, 161793},
    {  60, 161893},
    {  60, 161993},
    {  90, 162143},
    {  45, 162218},
    {  45, 162293},
    {  45, 162368},
    {  45, 162443},
    {  90, 162593},
    {  45, 162668},
    {  45, 162743},
    {  45, 162818},
    {  45, 162893},
    {  45, 162968},
    {  45, 163043},
    {  90, 163193},
    {  90, 163343},
    {  45, 163418},
    {  45, 163493},
    {  90, 163643},
    {  45, 163718},
    {  45, 163793},
    {  45, 163868},
    {  45, 163943},
    {  45, 164018},
    {  45, 164093},
    {  30, 164143},
    {  30, 164193},
    {  30, 164243},
    {  90, 164393},
    { 180, 164693},
    {  90, 164843},
    {  90, 164993},
    {  90, 165143},
    {  45, 165218},
    {  45, 165293},
    {  90, 165443},
    {  90, 165593},
    {  90, 165743},
    {  90, 165893},
    {  90, 166043},
    {  90, 166193},
    {  45, 166268},
    {  45, 166343},
    {  45, 166418},
    {  45, 166493},
    {  90, 166643},
    {  90, 166793},
    {  90, 166943},
    {  90, 167093},
    {  90, 167243},
    {  45, 167318},
    {  45, 167393},
    {  90, 167543},
    {  90, 167693},
    {  45, 167768},
    {  45, 167843},
    {  90, 167993},
    {  90, 168143},
    {  90, 168293},
    {  90, 168443},
    {  90, 168593},
    {  45, 168668},
    {  45, 168743},
    {  90, 168893},
    {  90, 169043},
    {  90, 169193},
    { 180, 169493},
    {  90, 169643},
    {  90, 169793},
    {  90, 169943},
    {  90, 170093},
    { 180, 170393},
    {  90, 170543},
    {  90, 170693},
    {  90, 170843},
    {  90, 170993},
    {  90, 171143},
    {  90, 171293},
    { 180, 171593},
    {  90, 171743},
    {  90, 171893},
    {  90, 172043},
    {  45, 172118},
    {  45, 172193},
    {  90, 172343},
    {  90, 172493},
    {  45, 172568},
    {  45, 172643},
    {  90, 172793},
    { 180, 173093},
    { 180, 173393},
    { 180, 173693},
    {  45, 173768}
};
}

const char* vertexTextureShaderSource   = "#version 330 core\n"
                                          "layout (location = 0) in vec3 aPos;\n"
                                          "layout (location = 1) in vec2 aTexCoord;\n"
                                          "out vec2 TexCoord;\n"
                                          "uniform mat4 projectionMatrix;\n"
                                          "uniform mat4 modelMatrix;\n"
                                          "void main()\n"
                                          "{\n"
                                          "   gl_Position = projectionMatrix * modelMatrix * vec4(aPos, 1.0);\n"
                                          "   TexCoord = aTexCoord;\n"
                                          "}\0";
const char* fragmentTextureShaderSource = "#version 330 core\n"
                                          "out vec4 FragColor;\n"
                                          "in vec2 TexCoord;\n"
                                          "uniform sampler2D sample_texture;\n"
                                          "void main()\n"
                                          "{\n"
                                          "   vec4 texColor = texture(sample_texture, TexCoord);\n"
                                          "   if(texColor.a < 0.1)\n"
                                          "        discard;\n"
                                          "   FragColor = texColor;\n"
                                          "}\n\0";

GameManager::GameManager( )
{
    spdlog::info( "GameManager concept constructor called" );

    SetupCamera( );
    LoadAudio( );

    m_TileSpriteSet = AddConcept<TileSpriteSet>( );
    m_TileSpriteSet->SetActiveCamera( m_Camera );

    LoadPlayerSprites( );

    LoadTileSprites( { 360, 270, 240, 180, 135, 120, 90, 60, 45, 30 } );
    LoadTileMap( );

    m_TileSpriteSet->UpdateTileMapOffset( );
    m_InActivePlayerSprite->SetRotation( 0, 0, glm::radians( 180.f ) );

    spdlog::info( "GameManager concept constructor returned" );
}

void
GameManager::Apply( )
{
    const auto DeltaSecond    = Engine::GetEngine( )->GetDeltaSecond( ) * m_PlayingSpeed;
    const bool PlayerInteract = IsUserPrimaryInteract( );

    if ( m_IsCheckingDeviceDelay ) [[unlikely]]
    {
        // Adjust the audio offset to the correct value
        (void) m_DelayCheckingHandle.GetCorrectedCurrentAudioOffset( );

        if ( PlayerInteract )
        {
            UpdateDeviceOffset( );
        }

        // End of offset wizard
        if ( m_DelayCheckingHandle.IsAudioEnded( ) )
        {
            spdlog::info( "End of offset wizard, final offset: {}ms", m_UserDeviceOffsetMS );
            m_IsCheckingDeviceDelay = false;

            m_MainAudioHandle.Resume( );
            m_TileSpriteSet->UpdateTileMapOffset( );
        }
    } else
    {
        const int64_t PlayPosition         = m_MainAudioHandle.GetCorrectedCurrentAudioOffset( ) - m_UserDeviceOffsetMS;
        const FloatTy NextPlayTilePosition = m_TileSpriteSet->GetNextStartTime( );
        const FloatTy DeltaTimeToNext      = NextPlayTilePosition - PlayPosition;

        if ( m_WaitingForFirstBeat )
        {
            if ( DeltaTimeToNext <= m_MSPB )
            {
                m_WaitingForFirstBeat = false;
            }
        } else if ( !m_TileSpriteSet->TileReachedEnd( ) )
        {
            /*
             *
             * Rotate player
             *
             * */

            const FloatTy  MinutePerSecond = 1 / 60.F;
            const FloatTy  BeatPerMinute   = m_BPM;
            constexpr auto RadiansPerBeat  = glm::radians<FloatTy>( 180 );

            const auto RadiansPerSecond = RadiansPerBeat * BeatPerMinute * MinutePerSecond;
            m_InActivePlayerSprite->AlterRotation( 0, 0, -DeltaSecond * RadiansPerSecond );

            const Tolerance NoteTolerance = ToTolerance( DeltaTimeToNext );

            bool DidAdvanced = false;
            if ( m_IsAutoPlay )
            {
                static FloatTy AccTime = 0;
                AccTime += DeltaSecond;
                spdlog::info( "AccTime: {}, DeltaSecond: {}, Rotation: {}, RPS: {}", AccTime, DeltaSecond, m_InActivePlayerSprite->GetRotation( ).Z, RadiansPerSecond );

                if ( PlayPosition >= NextPlayTilePosition )
                {

                    // spdlog::info( "Last rotation: {}", m_InActivePlayerSprite->GetRotation( ).Z );
                    // spdlog::info( "DeltaSecond: {}, DeltaSecond * RadiansPerSecond: {}r", DeltaSecond, -DeltaSecond * RadiansPerSecond );
                    spdlog::info( "Play position: {}ms, next play tile position: {}ms", PlayPosition, NextPlayTilePosition );

                    TryAlterPlayer( );

                    m_TileSpriteSet->Advance( );
                    DidAdvanced = true;

                    AccTime = 0;
                }
            } else
            {

                if ( NoteTolerance == Tolerance::Miss )
                {
                    spdlog::info( "Node Miss: {} -> {}", PlayPosition, NextPlayTilePosition );

                    m_TileSpriteSet->Advance( );
                    DidAdvanced = true;
                }
                if ( PlayerInteract )
                {
                    DidAdvanced = true;
                    spdlog::info( "Play position: {}ms, next tile position: {}ms, Diff: {}", PlayPosition, NextPlayTilePosition, DeltaTimeToNext );

                    switch ( NoteTolerance )
                    {
                    case Tolerance::Perfect:
                        spdlog::info( "Perfect" );
                        m_TileSpriteSet->Advance( );
                        break;
                    case Tolerance::Good:
                        spdlog::info( "Good" );
                        m_TileSpriteSet->Advance( );
                        break;
                    case Tolerance::Bad:
                        spdlog::info( "Bad" );
                        m_TileSpriteSet->Advance( );
                        break;
                    case Tolerance::EarlyMiss:
                        spdlog::info( "EarlyMiss" );
                        m_TileSpriteSet->Advance( );
                        break;
                    default:
                        DidAdvanced = false;
                        break;
                    }
                }
            }

            if ( DidAdvanced )
            {
                const auto CompensateBeat         = DeltaTimeToNext / m_MSPB;
                const auto NoteHitCompensateAngle = CompensateBeat * 3.14159265f;

                const auto RotationDegree = m_TileSpriteSet->UpdateTileMapOffset( );
                m_InActivePlayerSprite->SetRotation( 0, 0, RotationDegree + 3.14159264f + NoteHitCompensateAngle );
            }
        }
    }
}

void
GameManager::LoadTileSprites( const std::set<uint32_t>& Degrees )
{
    auto SProgram = std::make_shared<ShaderProgram>( );
    SProgram->Load( vertexTextureShaderSource, fragmentTextureShaderSource );
    auto Sh = std::make_shared<Shader>( );
    Sh->SetProgram( SProgram );

    const auto AddDegreeTile = [ & ]( uint32_t Degree ) {
        auto* Sp = m_TileSpriteSet->RegisterSprite( Degree, std::make_unique<SpriteSquareTexture>( 512, 512 ) );

        Sp->SetShader( Sh );
        Sp->SetTexturePath( "Access/Texture/Tile/" + std::to_string( Degree ) + ".png" );
        Sp->SetupSprite( );
    };

    m_TileSpriteSet->SetSpritesOrigin( { 512 / 2, 512 / 2 } );

    for ( auto Degree : Degrees )
    {
        AddDegreeTile( Degree );
    }
}

void
GameManager::LoadTileMap( )
{
    m_TileSpriteSet->AddTile( { 180, 0 } );
    for ( int i = 0; i < 30; ++i )
    {
        m_TileSpriteSet->AddTile( { TmpMap[ i ].first, TmpMap[ i ].second } );
    }
}

void
GameManager::LoadAudio( )
{
    m_PlayingSpeed = 1;

    auto* DDC             = Engine::GetEngine( )->GetAudioEngine( )->CreateAudioHandle( "Access/Audio/Beats.ogg" );
    m_DelayCheckingHandle = Engine::GetEngine( )->GetAudioEngine( )->PlayAudio( DDC, true );

    auto* MAC         = Engine::GetEngine( )->GetAudioEngine( )->CreateAudioHandle( "Access/Audio/Papipupipupipa.ogg" );
    m_MainAudioHandle = Engine::GetEngine( )->GetAudioEngine( )->PlayAudio( MAC, true, true );
    m_MainAudioHandle.SetSpeed( m_PlayingSpeed );
    SetBPM( 200 * m_PlayingSpeed );
}

void
GameManager::SetupCamera( )
{
    m_Camera = AddConcept<PureConceptCamera>( );
    m_Camera->SetScale( 1 / 1.5f );
    m_Camera->UpdateProjectionMatrix( );
}

void
GameManager::LoadPlayerSprites( )
{
    auto SProgram = std::make_shared<ShaderProgram>( );
    SProgram->Load( vertexTextureShaderSource, fragmentTextureShaderSource );
    auto Sh = std::make_shared<Shader>( );
    Sh->SetProgram( SProgram );

    m_InActivePlayerSprite = FBSp = AddConcept<SpriteSquareTexture>( 512, 512 );

    FBSp->SetRotationCenter( 512 / 2 - TileSpriteSet::TileDistance, 512 / 2 );
    FBSp->SetOrigin( 512 / 2 - TileSpriteSet::TileDistance, 512 / 2 );

    FBSp->SetShader( Sh );
    FBSp->SetTexturePath( "Access/Texture/Player/FireBall.png" );
    FBSp->SetActiveCamera( m_Camera );
    FBSp->SetupSprite( );

    m_ActivePlayerSprite = IBSp = AddConcept<SpriteSquareTexture>( 512, 512 );
    IBSp->SetOrigin( 512 / 2, 512 / 2 );
    IBSp->SetShader( Sh );
    IBSp->SetTexturePath( "Access/Texture/Player/IceBall.png" );
    IBSp->SetActiveCamera( m_Camera );
    IBSp->SetupSprite( );
}

bool
GameManager::TryAlterPlayer( )
{

    m_ActivePlayerSprite->SetRotationCenter( 512 / 2 - TileSpriteSet::TileDistance, 512 / 2 );
    m_ActivePlayerSprite->SetOrigin( 512 / 2 - TileSpriteSet::TileDistance, 512 / 2 );

    m_InActivePlayerSprite->SetRotation( );
    m_InActivePlayerSprite->SetRotationCenter( );
    m_InActivePlayerSprite->SetOrigin( 512 / 2, 512 / 2 );

    m_ActivePlayerIsFire = !m_ActivePlayerIsFire;
    std::swap( m_ActivePlayerSprite, m_InActivePlayerSprite );

    return true;
}

bool
GameManager::IsUserPrimaryInteract( )
{
    return Engine::GetEngine( )->GetUserInputHandle( )->GetPrimaryKey( ).isPressed
        || Engine::GetEngine( )->GetUserInputHandle( )->GetKeyState( GLFW_KEY_SPACE ).isPressed;
}

void
GameManager::UpdateDeviceOffset( )
{
    constexpr int64_t AudioDefaultOffset = 3000;
    const int64_t     PlayPosition       = m_DelayCheckingHandle.GetCorrectedCurrentAudioOffset( );

    m_UserDeviceOffsetMS = PlayPosition - AudioDefaultOffset;
    spdlog::info( "Offset: {}", m_UserDeviceOffsetMS );
}

void
GameManager::SetBPM( FloatTy BPM )
{
    m_BPM  = BPM;
    m_MSPB = 60 * 1000 / BPM;
}

GameManager::Tolerance
GameManager::ToTolerance( FloatTy DeltaTime )
{
    const auto AbsDeltaTime = std::abs( DeltaTime );
    if ( AbsDeltaTime < (FloatTy) Tolerance::Perfect )
    {
        return Tolerance::Perfect;
    } else if ( AbsDeltaTime < (FloatTy) Tolerance::Good )
    {
        return Tolerance::Good;
    } else if ( AbsDeltaTime < (FloatTy) Tolerance::Bad )
    {
        return Tolerance::Bad;
    } else if ( DeltaTime > 0 )
    {
        if ( AbsDeltaTime < (FloatTy) Tolerance::Bad )
        {
            return Tolerance::EarlyMiss;
        } else
        {
            return Tolerance::None;
        }
    } else
    {
        return Tolerance::Miss;
    }
}
